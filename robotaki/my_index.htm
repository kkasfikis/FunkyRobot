<!-- TUC Computer Graphics Course Sandbox -->
<head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>TUC Graphics - WebGL Sandbox</title>

<!-- external libraries for matrix calculations and maintenance -->
<script type="text/javascript" src="./sandbox_files/glMatrix-0.9.5.min.js"></script>
<script type="text/javascript" src="./sandbox_files/webgl-utils.js"></script>

<!-- Code for the vertex shader-->
<script id="shader-vs" type="x-shader/x-vertex">
//attributes for the vertex shader (different for every thread/core that will execute a copy of this)
    attribute vec3 aVertexPosition;
    attribute vec4 aVertexColor;
	attribute vec2 aTextureCoord;

	//ModelView and Projection Matrices
    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;

	//Variable to be forwarded to the corresponding thread of the fragment shader
    varying vec4 vColor;
	varying vec2 vTextureCoord;
	//main function of the vertex shader
	//this code will be copied to many shader cores/threads and executed with the associated
	//data for every vertex (matrices, color, etc)
    void main(void) {
	
	//Each vertex is multiplied with the ModelView and Projection matrices and created a fragment
	    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
		//Its color is forwarded to the fragment shader
        vColor = aVertexColor;
		vTextureCoord = aTextureCoord;
    }
</script>

<!-- Code for the fragment shader-->
<script id="shader-fs" type="x-shader/x-fragment">
    //necessary code for compatibility
	precision mediump float;

	//Variable coming from the vertex shader
    varying vec4 vColor;

    void main(void) {
	//the fragment gets its color value.
	//in the fragment shader many advanced shading algorithms can be implemented (Phong etc..)
        gl_FragColor = vColor;
    }
</script>

<!-- Javascript code for the main functionality of the WebGL application-->
<script type="text/javascript">

    //the variable that will accommodate the WebGL context
	//every call to the state machine will be done through this variable
    var gl;

	//Initialize WebGL
    function initGL(canvas) {
        try {
		//get a webgl context
            gl = canvas.getContext("experimental-webgl");
			//assign a viewport width and height based on the HTML canvas element properties
			//(check last lines of code)
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
			//any error is handled here
			//all errors are visible in the console (F12 in Google chrome)
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }


	//Find and compile shaders (vertex + fragment shader)
    function getShader(gl, id) {
	//gets the shader scripts (vertex + fragment)
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
		//create shaders
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

		//ask WebGL to compile shaders
		//we check for errors here too
		//all errors are visible in the console (F12 in Google chrome)
        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }

	
	
	var supermanTexture;
	function initTexture() {
		supermanTexture = gl.createTexture();
		supermanTexture.image = new Image();
		supermanTexture.image.onload = function() {
		handleLoadedTexture(supermanTexture)
		}
		supermanTexture.image.src = "superman.png";
	}
	function handleLoadedTexture(texture) {
		gl.bindTexture(gl.TEXTURE_2D, texture);
		gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		gl.bindTexture(gl.TEXTURE_2D, null);
	}
	
	var shaderProgram;
	//Creates a program from a vertex + fragment shader pair
    function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
		//link the compiled binaries
        gl.linkProgram(shaderProgram);

		//check for errors, again
        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

		//activate current program
		//this sandbox has only on shader pair
		//we can have as many as we wish in more complex applications
        gl.useProgram(shaderProgram);

		//Update attributes for the vertex shader
		//attributes are accessible only from the vertex shader
		//if we want accessible data from a fragment shader we can use uniform variables,
		//or varyings that will be forwarded from the vertex shader to the fragment shader
		
		//Vertex position data
        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

		//Vertex color data
        shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
        gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);

		//Update uniform variables
		//this variables can be accessed from both the vertex and fragment shader
        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
    }


	//ModelView and Projection matrices
	//mat4 comes from the external library
    var mvMatrix = mat4.create();
    var mvMatrixStack = [];
    var pMatrix = mat4.create();

	//The matrix stack operation are implemented below to handle local transformations
	
	//Push Matrix Operation
    function mvPushMatrix() {
        var copy = mat4.create();
        mat4.set(mvMatrix, copy);
        mvMatrixStack.push(copy);
    }

	//Pop Matrix Operation
    function mvPopMatrix() {
        if (mvMatrixStack.length == 0) {
            throw "Invalid popMatrix!";
        }
        mvMatrix = mvMatrixStack.pop();
    }


	//Sets + Updates matrix uniforms
    function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
    }


	//Rotation function helper
	function degToRad(degrees) {
        return degrees * Math.PI / 180;
    }

	
	var startingX=1.5;
	var startingY=0.0;
	var startingZ=-10;
	
	var randColor = 1;
	var cubeVertexTextureCoordBuffer;
	//Vertex, Index and Color Data
	var cube1VertexColorBuffer;
	var square1VertexColorBuffer;
    var cubeVertexPositionBuffer; // contains coordinates
    var cubeVertexColorBuffer; //contains color per vertex
    var cubeVertexIndexBuffer; //contains indices for chains of vertices to draw triangles/other geometry
	var pyramidVertexPositionBuffer;
	var pyramidVertexColorBuffer;
	//Initialize VBOs, IBOs and color
    function initBuffers() {
        //Vertex Buffer Object
		
		squareVertexPositionBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);
		vertices = [
			 1.0,  1.0,  0.0,
			-1.0,  1.0,  0.0,
			 1.0, -1.0,  0.0,
			-1.0, -1.0,  0.0
		];
		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
		squareVertexPositionBuffer.itemSize = 3;
		squareVertexPositionBuffer.numItems = 4;
		
		squareVertexColorBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexColorBuffer);
		colors = []
		for (var i=0; i < 4; i++) {
		  colors = colors.concat([0.01*randColor, 0.02*randColor, 0.05*randColor, 1.0]); //WHITE SQUARE
		}
		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
		squareVertexColorBuffer.itemSize = 4;
		squareVertexColorBuffer.numItems = 4;
		
        pyramidVertexPositionBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexPositionBuffer);
		var vertices = [
			// Front face
			 0.0,  1.0,  0.0,
			-1.0, -1.0,  1.0,
			 1.0, -1.0,  1.0,
			// Right face
			 0.0,  1.0,  0.0,
			 1.0, -1.0,  1.0,
			 1.0, -1.0, -1.0,
			// Back face
			 0.0,  1.0,  0.0,
			 1.0, -1.0, -1.0,
			-1.0, -1.0, -1.0,
			// Left face
			 0.0,  1.0,  0.0,
			-1.0, -1.0, -1.0,
			-1.0, -1.0,  1.0
		];
		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
		pyramidVertexPositionBuffer.itemSize = 3;
		pyramidVertexPositionBuffer.numItems = 12;
		
		//Bind buffer to ARRAY_BUFFER
        cubeVertexPositionBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        vertices = [
            // Front face
            -1.0, -1.0,  1.0,
             1.0, -1.0,  1.0,
             1.0,  1.0,  1.0,
            -1.0,  1.0,  1.0,

            // Back face
            -1.0, -1.0, -1.0,
            -1.0,  1.0, -1.0,
             1.0,  1.0, -1.0,
             1.0, -1.0, -1.0,

            // Top face
            -1.0,  1.0, -1.0,
            -1.0,  1.0,  1.0,
             1.0,  1.0,  1.0,
             1.0,  1.0, -1.0,

            // Bottom face
            -1.0, -1.0, -1.0,
             1.0, -1.0, -1.0,
             1.0, -1.0,  1.0,
            -1.0, -1.0,  1.0,

            // Right face
             1.0, -1.0, -1.0,
             1.0,  1.0, -1.0,
             1.0,  1.0,  1.0,
             1.0, -1.0,  1.0,

            // Left face
            -1.0, -1.0, -1.0,
            -1.0, -1.0,  1.0,
            -1.0,  1.0,  1.0,
            -1.0,  1.0, -1.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
		//every item has 3 coordinates (x,y,z)
        cubeVertexPositionBuffer.itemSize = 3;
		//we have 24 vertices
        cubeVertexPositionBuffer.numItems = 24;

		//Color
        cubeVertexColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        colors = [
            [0.160, 0.160, 0.160, 0.6], // Front face
            [0.160, 0.160, 0.160, 0.6], // Back face
            [0.160, 0.160, 0.160, 0.7], // Top face
            [0.160, 0.160, 0.160, 0.7], // Bottom face
            [0.160, 0.160, 0.160, 0.5], // Right face
            [0.160, 0.160, 0.160, 0.5]  // Left face
        ];
        var unpackedColors = [];
        for (var i in colors) {
            var color = colors[i];
			//assign colors for each vertex of each face based on the packed representation above
            for (var j=0; j < 4; j++) {
                unpackedColors = unpackedColors.concat(color);
            }
        }
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
		//every color has 4 values: red, green, blue and alpha (transparency: use 1.0 (opaque) for this demo)
        cubeVertexColorBuffer.itemSize = 4;
		//24 color values (we have 24 vertices to color...)
        cubeVertexColorBuffer.numItems = 24;

		//Index Buffer Object
		//it joins sets of vertices into faces
        cubeVertexIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        var cubeVertexIndices = [
		//this numbers are positions in the VBO array above
            0, 1, 2,      0, 2, 3,    // Front face
            4, 5, 6,      4, 6, 7,    // Back face
            8, 9, 10,     8, 10, 11,  // Top face
            12, 13, 14,   12, 14, 15, // Bottom face
            16, 17, 18,   16, 18, 19, // Right face
            20, 21, 22,   20, 22, 23  // Left face
        ];
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
        //we have one item - the cube
		cubeVertexIndexBuffer.itemSize = 1;
		//we have 36 indices (6 faces, every face has 2 triangles, each triangle 3 vertices: 2x3x6=36)
        cubeVertexIndexBuffer.numItems = 36;
		
		pyramidVertexColorBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexColorBuffer);
		var colors = [
			// Front face
			1.0, 0.5, 0.0, 1.0,
			1.0, 0.4, 0.0, 1.0,
			1.0, 0.5, 1.0, 1.0,
			// Right face
			1.0, 0.5, 0.0, 1.0,
			1.0, 0.4, 1.0, 1.0,
			1.0, 0.5, 0.0, 1.0,
			// Back face
			1.0, 0.5, 0.0, 1.0,
			1.0, 0.4, 0.0, 1.0,
			1.0, 0.5, 1.0, 1.0,
			// Left face
			1.0, 0.5, 0.0, 1.0,
			1.0, 0.4, 1.0, 1.0,
			1.0, 0.5, 0.0, 1.0
		];
		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
		pyramidVertexColorBuffer.itemSize = 4;
		pyramidVertexColorBuffer.numItems = 12;
    }

	//Helper Variables
	var down = false;
	var up = false;
    var rCube = 0;
	var xTrans = 0.0;
	var yTrans = 0.0;
	var dir = false;
	var prev_dir = false;
	var trans = 0.0;
	var rotate = 0.0;
	var leftTrans = 0.0;
	var rightTrans = 0.0;
	

	var movDirection = true;
	
	//array for keeping pressed keys
	var currentlyPressedKeys = {};

	//Keyboard handler
	//do not touch :) 
    function handleKeyDown(event) {
        currentlyPressedKeys[event.keyCode] = true;

        if (String.fromCharCode(event.keyCode) == "F") {
            filter += 1;
            if (filter == 3) {
                filter = 0;
            }
        }
    }


	//Keyboard handler
	//do not touch :) 
    function handleKeyUp(event) {
        currentlyPressedKeys[event.keyCode] = false;
    }

	//Key pressed callback
	//37-40 are the codes for the arrow keys
	//xTrans + yTrans are used in the ModelView matrix for local transformation of the cube
    function handleKeys() {
        if(currentlyPressedKeys[37] || currentlyPressedKeys[39]){
			if(yTrans<1){
				if(currentlyPressedKeys[37]){
						// Left cursor key
					if(rotate > -90){
						rotate -= 5;
					}
					else{
						if(xTrans>-18){
							xTrans -= 0.1;
						}
					}
				}
				if (currentlyPressedKeys[39]) {
					if(rotate < 90){
						rotate += 5;
					}
					else{
						if(xTrans<18){
							xTrans += 0.1;
						}
					}
				}
				if(xTrans>-18 && xTrans<18){
					if(mov){
						if (a >= 90){
							mov = false;
							start = true;
						}
						else{
							a = a + 2;
						}
					}
					else{
						if(a <= 0.00){
							mov = true;
						}
						else{
							a = a - 2;
						}
					}
					
					if (start){
						if(!mov){
							if (b >= 90){
								mov = false;
								start = true;
							}
							else{
								b = b + 2;
							}
						}
						else{
							if(b <= 0.00){
								mov = true;
							}
							else{
								b = b - 2;
							}
						}
					}
				}
			}
			else{
				if(currentlyPressedKeys[37]){
						// Left cursor key
						rotate -= 5;
				}
				if (currentlyPressedKeys[39]) {
						rotate += 5;
				}
			}
		}	
		else
		{
			if(a > 0){
				a = a - 2;
			}
			else{
				a = 0;
			}
			
			if(b >0){
				b = b -2;
			}
			else {
				b=0;
				start = false;
			}
		}
        if (currentlyPressedKeys[38]) {
            // Up cursor key
			up=true;
			if(fly < 180){
				fly = fly + 15;
			}
            yTrans += 0.1;
        }
		else{
			up = false;
			if(fly>0){
				fly = fly - 15;
			}
			if(yTrans>0.0){
				yTrans -= 0.1;
			}
		}
		
        if (currentlyPressedKeys[40]) {
            // Down cursor key
			if(yTrans>0.0){
				down = true;
				yTrans += 0.05;
			}
			
        }
		else{
			down = false;
		}
    }
	function getRandomArbitrary(min, max) {
		return Math.random() * (max - min) + min;
	}
	var a=0;
	var b=0;
	var fly =0;
	var mov = true;
	var start = false;
	
	//For every frame this function draws the complete scene from the beginning
    function drawScene() {
		
		//calculateRotations();
	
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
        mat4.identity(mvMatrix);
		
		
		
		
		
		//HEAD
		mat4.translate(mvMatrix, [0.0, 0.0, -50]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.rotateY(mvMatrix,degToRad(rotate));
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		//NECK
		mat4.translate(mvMatrix, [-0.00, -1.07 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.scale(mvMatrix,[0.15,0.15,0.25]);
        mat4.rotateY(mvMatrix,degToRad(rotate));
		gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		//BODY
		mat4.translate(mvMatrix, [0.0, -2.625 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.rotateY(mvMatrix,degToRad(rotate));
		mat4.scale(mvMatrix,[1.5,2.5,0.7]);
		gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
		gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
		gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
		gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
		setMatrixUniforms();
		gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		
		//========================================================================================================================================================
																//ARMS
		//========================================================================================================================================================
		//LEFT ARM ARTHROSIS
		mat4.translate(mvMatrix, [-1.75, 2.0 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [+1.75, 0.0 , 0.0]);
        mat4.rotateY(mvMatrix,degToRad(rotate));
		mat4.translate(mvMatrix, [-1.75, 0.0 , 0.0]);
		mat4.scale(mvMatrix,[0.25,0.25,0.25]);
		gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		//RIGHT ARM ARTHROSIS
		mat4.translate(mvMatrix, [3.5, 0.0 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [-1.75, 0.0 , 0.0]);
		mat4.rotateY(mvMatrix,degToRad(rotate));       
		mat4.translate(mvMatrix, [+1.75, 0.0 , 0.0]);
		mat4.scale(mvMatrix,[0.25,0.25,0.25]);
    	gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		//LEFT ARM TOP
		mat4.translate(mvMatrix, [-4.0, -0.5 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [+2, 0.0 , 0.0]);
        mat4.rotateY(mvMatrix,degToRad(rotate));
		mat4.translate(mvMatrix, [-2, 0.0 , 0.0]);
		mat4.translate(mvMatrix, [0.0, 0.5 , 0.0]);		
     	mat4.rotate(mvMatrix, degToRad(-fly), [1, 0, 0]);
		mat4.translate(mvMatrix, [0.0, -0.5 , 0.0]);
		mat4.scale(mvMatrix,[0.4,1.0,0.4]);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		//RIGHT ARM TOP
		mat4.translate(mvMatrix, [4.5, 0.0 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [-2.25, 0.0 , 0.0]);
		mat4.rotateY(mvMatrix,degToRad(rotate));       
		mat4.translate(mvMatrix, [+2.25, 0.0 , 0.0]);
		mat4.scale(mvMatrix,[0.4,1.0,0.4]);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		//LEFT ARM INNER ARTHROSIS
		mat4.translate(mvMatrix, [-4.5, -1.25 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [+2.25, 0.0 , 0.0]);
        mat4.rotateY(mvMatrix,degToRad(rotate));
		mat4.translate(mvMatrix, [-2.25, 0.0 , 0.0]); 	
		mat4.translate(mvMatrix, [0.0, 1.75 , 0.0]);		
     	mat4.rotate(mvMatrix, degToRad(-fly), [1, 0, 0]);
		mat4.translate(mvMatrix, [0.0, -1.75 , 0.0]);
		mat4.scale(mvMatrix,[0.25,0.25,0.25]);      
		gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		//RIGHT ARM INNER ARTHROSIS
		mat4.translate(mvMatrix, [4.5, 0.0 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [-2.25, 0.0 , 0.0]);
		mat4.rotateY(mvMatrix,degToRad(rotate));       
		mat4.translate(mvMatrix, [+2.25, 0.0 , 0.0]);	
		mat4.scale(mvMatrix,[0.25,0.25,0.25]);	
		gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
			
			
		//LEFT ARM BOTTOM
		mat4.translate(mvMatrix, [-4.5, -1.25 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [+2.25, 0.0 , 0.0]);
        mat4.rotateY(mvMatrix,degToRad(rotate));
		mat4.translate(mvMatrix, [-2.25, 0.0 , 0.0]);
		mat4.translate(mvMatrix, [0.0, 3 , 0.0]);		
     	mat4.rotate(mvMatrix, degToRad(-fly), [1, 0, 0]);
		mat4.translate(mvMatrix, [0.0, -3 , 0.0]);
		mat4.translate(mvMatrix, [ 0.0, 1.25, 0.0]);
     	mat4.rotate(mvMatrix, degToRad(-a), [1, 0, 0]);
		mat4.translate(mvMatrix, [ 0.0, -1.25, 0.0]);
		mat4.scale(mvMatrix,[0.4,1.0,0.4]);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		//RIGHT ARM BOTTOM
		mat4.translate(mvMatrix, [4.5, 0.0 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [-2.45, 0.0 , 0.0]);
		mat4.rotateY(mvMatrix,degToRad(rotate));       
		mat4.translate(mvMatrix, [+2.45, 0.0 , 0.0]);
		mat4.translate(mvMatrix, [ 0.0, 1.25, 0.0]);
     	mat4.rotate(mvMatrix, degToRad(-b), [1, 0, 0]);
		mat4.translate(mvMatrix, [0.0, -1.25, 0.0]);
		mat4.scale(mvMatrix,[0.4,1.0,0.4]);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		
		if(down){
			//DOWN RIGHT PROPELER
			mat4.translate(mvMatrix, [0.0, -1.2 , 0.0]);
			mvPushMatrix();
			mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
			mat4.translate(mvMatrix, [-2.45, 0.0 , 0.0]);
			mat4.rotateY(mvMatrix,degToRad(rotate));       
			mat4.translate(mvMatrix, [+2.45, 0.0 , 0.0]);
			mat4.translate(mvMatrix, [ 0.0, 1.25, 0.0]);
			mat4.rotate(mvMatrix, degToRad(-b), [1, 0, 0]);
			mat4.translate(mvMatrix, [0.0, -1.25, 0.0]);
			mat4.scale(mvMatrix,[0.4,1.0,0.4]);
			
			gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexPositionBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, pyramidVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
			gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexColorBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, pyramidVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
			setMatrixUniforms();
			gl.drawArrays(gl.TRIANGLES, 0, pyramidVertexPositionBuffer.numItems);
			mvPopMatrix();
			
			//DOWN LEFT PROPELER
			mat4.translate(mvMatrix, [-4.5, 0.0 , 0.0]);
			mvPushMatrix();
			mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
			mat4.translate(mvMatrix, [+2.45, 0.0 , 0.0]);
			mat4.rotateY(mvMatrix,degToRad(rotate));       
			mat4.translate(mvMatrix, [-2.45, 0.0 , 0.0]);
			mat4.translate(mvMatrix, [ 0.0, 1.25, 0.0]);
			mat4.rotate(mvMatrix, degToRad(-b), [1, 0, 0]);
			mat4.translate(mvMatrix, [0.0, -1.25, 0.0]);
			mat4.scale(mvMatrix,[0.4,1.0,0.4]);
			
			gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexPositionBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, pyramidVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
			gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexColorBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, pyramidVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
			setMatrixUniforms();
			gl.drawArrays(gl.TRIANGLES, 0, pyramidVertexPositionBuffer.numItems);
			mvPopMatrix();
		
		//========================================================================================================================================================
		
		//========================================================================================================================================================
																//LEGS
		//========================================================================================================================================================
		//LEFT LEG ARTHROSIS
			mat4.translate(mvMatrix, [1.25, -0.55 , 0.0]);
			mvPushMatrix();
			mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
			mat4.translate(mvMatrix, [+1.125, 0.0, 0.0]);
			mat4.rotateY(mvMatrix,degToRad(rotate));
			mat4.translate(mvMatrix, [-1.125, 0.0, 0.0]);
			mat4.scale(mvMatrix,[0.25,0.25,0.25]);
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
			setMatrixUniforms();
			gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
			mvPopMatrix();
		}
		else{
			mat4.translate(mvMatrix, [-3.25, -1.75 , 0.0]);
			mvPushMatrix();
			mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
			mat4.translate(mvMatrix, [+1.125, 0.0, 0.0]);
			mat4.rotateY(mvMatrix,degToRad(rotate));
			mat4.translate(mvMatrix, [-1.125, 0.0, 0.0]);
			mat4.scale(mvMatrix,[0.25,0.25,0.25]);
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
			setMatrixUniforms();
			gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
			mvPopMatrix();
		}

		
		
		//RIGHT LEG ARTHROSIS
		mat4.translate(mvMatrix, [2.0, 0.0 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [-1.125, 0.0, 0.0]);
		mat4.rotateY(mvMatrix,degToRad(rotate));
		mat4.translate(mvMatrix, [+1.125, 0.0, 0.0]);
		mat4.scale(mvMatrix,[0.25,0.25,0.25]);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		//LEFT LEG TOP
		mat4.translate(mvMatrix, [-2.0, -1.25 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [1.2, 0.0, 0.0]);
		mat4.rotateY(mvMatrix,degToRad(rotate));
		mat4.translate(mvMatrix, [-1.2, 0.0, 0.0]);
		mat4.translate(mvMatrix, [ 0.0, 1.25 ,0.0 ]);
     	mat4.rotateX(mvMatrix, degToRad(-b));// [0, 0, 1]);
		mat4.translate(mvMatrix, [ 0.0,-1.25 ,0.0 ]);
		mat4.scale(mvMatrix,[0.4,1.0,0.4]);
		gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		//RIGHT LEG TOP
		mat4.translate(mvMatrix, [2.0, 0.0 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [-1.2, 0.0, 0.0]);
		mat4.rotateY(mvMatrix,degToRad(rotate));
		mat4.translate(mvMatrix, [+	1.2, 0.0, 0.0]);
		mat4.translate(mvMatrix, [ 0.0, 1.25 ,0.0 ]);
     	mat4.rotateX(mvMatrix, degToRad(-a));// [0, 0, 1]);
		mat4.translate(mvMatrix, [ 0.0,-1.25 ,0.0 ]);
		mat4.scale(mvMatrix,[0.4,1.0,0.4]);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		//LEFT LEG INNER ARTHROSIS
		mat4.translate(mvMatrix, [-2.0, -1.25 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [1.125, 0.0, 0.0]);
		mat4.rotateY(mvMatrix,degToRad(rotate));
		mat4.translate(mvMatrix, [-1.125, 0.0, 0.0]);
     	mat4.translate(mvMatrix, [ 0.0, 2.5 ,0.0 ]);
     	mat4.rotateX(mvMatrix, degToRad(-b));// [0, 0, 1]);
		mat4.translate(mvMatrix, [ 0.0,-2.5 ,0.0 ]);
		mat4.scale(mvMatrix,[0.25,0.25,0.25]);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		//RIGHT LEG INNER ARTHROSIS
		mat4.translate(mvMatrix, [2.0, 0.0 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [-1.125, 0.0, 0.0]);
		mat4.rotateY(mvMatrix,degToRad(rotate));
     	mat4.translate(mvMatrix, [ 1.125, 0.0 ,0.0 ]);
		mat4.translate(mvMatrix, [0.0, 2.5, 0.0]);
     	mat4.rotateX(mvMatrix, degToRad(-a));// [0, 0, 1]);
		mat4.translate(mvMatrix, [ 0.0,-2.5 ,0.0 ]);
		mat4.scale(mvMatrix,[0.25,0.25,0.25]);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		//LEFT LEG BOTTOM
		mat4.translate(mvMatrix, [-2.0, -1.25  , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [1.2, 0.0, 0.0]);
		mat4.rotateY(mvMatrix,degToRad(rotate));
		mat4.translate(mvMatrix, [-1.2, 0.0, 0.0]);
		mat4.translate(mvMatrix, [ 0.0,  b*0.0333 , b*0.0333 ]);
		mat4.scale(mvMatrix,[0.4,1.0,0.4]);
		//mat4.rotate(mvMatrix, degToRad(rCube), [0, 1, 0]);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		//RIGHT LEG BOTTOM
		mat4.translate(mvMatrix, [2.0, 0.0 , 0.0]);
		mvPushMatrix();
		mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
		mat4.translate(mvMatrix, [-1.2, 0.0, 0.0]);
		mat4.rotateY(mvMatrix,degToRad(rotate));
		mat4.translate(mvMatrix, [1.2, 0.0, 0.0]);
     	mat4.translate(mvMatrix, [ 0.0,  a*0.0333 , a*0.0333 ]);
		mat4.scale(mvMatrix,[0.4,1,0.4]);
		gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();
		
		if(up){
			//UP RIGHT PROPELER
			mat4.translate(mvMatrix, [0.0, -2.0 , 0.0]);
			mvPushMatrix();
			mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
			mat4.translate(mvMatrix, [-1.0, 0.0 , 0.0]);
			mat4.rotateY(mvMatrix,degToRad(rotate));       
			mat4.translate(mvMatrix, [+1.0, 0.0 , 0.0]);
			mat4.translate(mvMatrix, [ 0.0, 1.25, 0.0]);
			mat4.rotate(mvMatrix, degToRad(-b), [1, 0, 0]);
			mat4.translate(mvMatrix, [0.0, -1.25, 0.0]);
			mat4.scale(mvMatrix,[0.5,2.0,0.5]);
			
			gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexPositionBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, pyramidVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
			gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexColorBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, pyramidVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
			setMatrixUniforms();
			gl.drawArrays(gl.TRIANGLES, 0, pyramidVertexPositionBuffer.numItems);
			mvPopMatrix();
			
			//UP LEFT PROPELER
			mat4.translate(mvMatrix, [-2.0, 0.0 , 0.0]);
			mvPushMatrix();
			mat4.translate(mvMatrix, [xTrans, yTrans, 0.0]);
			mat4.translate(mvMatrix, [+1.0, 0.0 , 0.0]);
			mat4.rotateY(mvMatrix,degToRad(rotate));       
			mat4.translate(mvMatrix, [-1.0, 0.0 , 0.0]);
			mat4.translate(mvMatrix, [ 0.0, 1.25, 0.0]);
			mat4.rotate(mvMatrix, degToRad(-b), [1, 0, 0]);
			mat4.translate(mvMatrix, [0.0, -1.25, 0.0]);
			mat4.scale(mvMatrix,[0.5,2.0,0.5]);
			
			gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexPositionBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, pyramidVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
			gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexColorBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, pyramidVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
			setMatrixUniforms();
			gl.drawArrays(gl.TRIANGLES, 0, pyramidVertexPositionBuffer.numItems);
			mvPopMatrix();
		}
		
		//========================================================================================================================================================
    }



	//this is the requestAnimFrame callback
	//For every tick, request another frame
	//handle keyboard, draw the scene, animate (update animation variebles) and continue
    function tick() {
		randColor = getRandomArbitrary(1,4);
        requestAnimFrame(tick);
		handleKeys();
        drawScene();
        //animate();
				
    }

	//Entry point of the WebGL context
	function webGLStart() {
        var canvas = document.getElementById("TUCWebGL");
        
		//Functions for initialization
		//Check above
		initGL(canvas);
        initShaders();
        initBuffers();
		initTexture();

		//Background Color: Color assigned for all pixels with no corresponding fragments
        gl.clearColor(0.3, 0.3, 0.3, 1.0);
		
		//Enable z-buffer for depth sorting
        gl.enable(gl.DEPTH_TEST);

		//define the keyboard handlers
		document.onkeydown = handleKeyDown;
        document.onkeyup = handleKeyUp;
		
		//the first tick of our application
        tick();
    }
//end of Javascript
</script>

</head>

<!-- HMTL for the canvas element-->
<body onload="webGLStart();"> <!-- calls the entry point of our application -->
    <canvas id="TUCWebGL" style="border: none;" width="500" height="500"></canvas>

	<br>PROJECT 1 - Robot<br>
	<br>AM : 2013030108<br>
	
	<br>==========================================<br>
	<br>LEFT ARROW ==>		MOVE / ROTATE LEFT<br>
	<br>RIGHT ARROW ==>		MOVE / ROTATE RIGHT<br>
	<br>TOP ARROW ==>		FLY<br>
	<br>BOTTOM ARROW ==>	REDUCE FALL SPED<br>
	<br>==========================================<br>
	<br>
</body></html>